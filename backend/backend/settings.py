"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
import sys
from dotenv import load_dotenv
from datetime import timedelta


sys.dont_write_bytecode = True

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv(os.path.join(BASE_DIR, '.env'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG') == 'True'

ALLOWED_HOSTS = []

AUTH_USER_MODEL = 'auth_app.AppUser'
# Application definition

INSTALLED_APPS = [
  'django.contrib.admin',
  'django.contrib.auth',
  'django.contrib.contenttypes',
  'django.contrib.sessions',
  'django.contrib.messages',
  'django.contrib.staticfiles',
  'corsheaders',
  'import_export',
  'rest_framework',
  'rest_framework_simplejwt',
  'rest_framework_simplejwt.token_blacklist',
  'banker_api',
  'auth_app',
]

MIDDLEWARE = [
  'django.middleware.security.SecurityMiddleware',
  'django.contrib.sessions.middleware.SessionMiddleware',
  'corsheaders.middleware.CorsMiddleware',
  'django.middleware.common.CommonMiddleware',
  'django.middleware.csrf.CsrfViewMiddleware',
  'django.contrib.auth.middleware.AuthenticationMiddleware',
  'django.contrib.messages.middleware.MessageMiddleware',
  'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
  {
    'BACKEND': 'django.template.backends.django.DjangoTemplates',
    'DIRS': [],
    'APP_DIRS': True,
    'OPTIONS': {
      'context_processors': [
        'django.template.context_processors.debug',
        'django.template.context_processors.request',
        'django.contrib.auth.context_processors.auth',
        'django.contrib.messages.context_processors.messages',
      ],
    },
  },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
  'default': {
    'ENGINE': 'django.db.backends.postgresql_psycopg2',
    'NAME': os.environ.get('DB_NAME_DEFAULT'),
    'USER': os.environ.get('DB_USER_DEFAULT'),
    'PASSWORD': os.environ.get('DB_PASSWORD_DEFAULT'),
    'HOST': os.environ.get('DB_HOST_DEFAULT'),
    'PORT': os.environ.get('DB_PORT_DEFAULT'),
  }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
  {
    'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
  },
  {
    'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
  },
  {
    'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
  },
  {
    'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
  },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'Asia/Yekaterinburg'

USE_I18N = True

USE_L10N = False

# USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static_production')
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'), os.path.join(BASE_DIR, 'logs'))

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Разделители для чисел
USE_THOUSAND_SEPARATOR = True
DECIMAL_SEPARATOR = ','

EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
EMAIL_FILE_PATH = os.path.join(BASE_DIR, 'email_messages')


# Даты
DATE_FORMATS = ['%d.%m.%Y']
DATE_INPUT_FORMATS = ['%Y-%m-%d', '%Y-%m', '%d.%m.%Y', '%d.%m']

DATETIME_FORMATS = ['%d.%m.%Y %H:%M:%S']
DATETIME_INPUT_FORMATS = ['%Y-%m-%d %H:%M:%S', '%d.%m.%Y %H:%M:%S']


CORS_ALLOWED_ORIGINS = os.environ.get('CORS_ALLOWED_ORIGINS').split(',')

# Если вы используете куки для аутентификации
CORS_ALLOW_CREDENTIALS = os.environ.get('CORS_ALLOW_CREDENTIALS') == 'True'

# Разрешение конкретных методов HTTP
CORS_ALLOW_METHODS = os.environ.get('CORS_ALLOW_METHODS').split(',')

# Разрешение конкретных заголовков HTTP
CORS_ALLOW_HEADERS = os.environ.get('CORS_ALLOW_HEADERS').split(',')


REST_FRAMEWORK = {
  'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.IsAuthenticated',),
  'DEFAULT_AUTHENTICATION_CLASSES': (
    'rest_framework_simplejwt.authentication.JWTAuthentication',
  ),
}

SIMPLE_JWT = {
  'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),  # Время жизни access токена
  'REFRESH_TOKEN_LIFETIME': timedelta(days=1),  # Время жизни refresh токена
  'ROTATE_REFRESH_TOKENS': True,  # Генерация нового refresh токена при обновлении access токена
  'BLACKLIST_AFTER_ROTATION': True,  # Блэклистинг старых refresh токенов после их обновления
  'UPDATE_LAST_LOGIN': True,  # Обновление последнего времени входа пользователя при использовании токенов
  'ALGORITHM': 'HS256',  # Алгоритм для подписи токенов
  'SIGNING_KEY': SECRET_KEY,  # Ключ для подписи токенов
  'AUTH_HEADER_TYPES': ('Bearer',),  # Тип заголовка авторизации
  'USER_ID_FIELD': 'id',  # Поле пользователя, используемое для идентификации
  'USER_ID_CLAIM': 'user_id',  # Поле в токене для хранения идентификатора пользователя
  'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
  'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
  'TOKEN_TYPE_CLAIM': 'token_type',  # Поле в токене для хранения типа токена
  'JTI_CLAIM': 'jti',  # Поле в токене для хранения идентификатора токена
  'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),  # Время жизни скользящего токена
  'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(
    days=1
  ),  # Время жизни refresh для скользящего токена
}
